/**
 * Launch jobs for every json file listed in jsonString separated by '\n'
 */
def launchJobs(jsonString, scope, saveOutput, outputDir) {

    def jobs = [:]
    println "List of Json file : " + jsonString
    jsonString = jsonString.trim()
    jsonList = jsonString.split("\n")
    num = 0
    status = true
    for (int i=0; i < jsonList.size(); i++) {
        item = jsonList[i]
        def currentJsonFile = "" + item
        if (currentJsonFile.trim() != "") {
            echo "Schedule job for json file : " + item
            b = build(job: "gpt-test-launcherV2", parameters: [
                    [$class: 'StringParameterValue', name: 'jsonPath', value: currentJsonFile],
                    [$class: 'StringParameterValue', name: 'testScope', value: "${scope}"],
                    [$class: 'StringParameterValue', name: 'outputDir', value: "${outputDir}"],
                    [$class: 'BooleanParameterValue', name: 'saveOutput', value: saveOutput]
                ],
                quietPeriod: 0,
                propagate: false,
                wait: true).result
            if(b == 'FAILURE') {
                echo "The job " + item + " failed."
                // currentBuild.result = 'FAILURE'
                status = false
            }
        }
        num++
    }
    if (!status) {
        throw new Exception("At least one test failed")
    }
}


pipeline {
    agent { label 'master' }
    tools {
        maven 'Maven-3.6.1'
        jdk 'JDK1.8.0_202'
    }

    parameters {
        string(name: 'gptBranch', defaultValue: 'master', description: 'Name of the branch to test for GPT project')
        string(name: 'testScope', defaultValue: 'REGULAR', description: 'Scope of the tests to launch (PUSH, DAILY, REGULAR, WEEKLY, RELEASE)')
        string(name: 'jsonPath', defaultValue: '', description: 'Path to json file describing tests')
        string(name: 'outputDir', defaultValue: '', description: 'Path to outputDir')
        booleanParam(name: 'saveOutput', defaultValue: false, description: 'Save output of failed tests (if scope is not [REGULAR, DAILY, WEEKLY, RELEASE])')
        booleanParam(name: 'reinstallSNAP', defaultValue: false, description: 'Reinstall latest version of SNAP generated on build server')
    }

    environment {
        JAVA_CMD = 'java'
        PYTHON_CMD = 'python'
        ACTIVATE_VENV_PATH = 'C:/Data/venv/Scripts/activate'
        OUTPUT_PATH = 'C:/Data/GPT'
        PYTHON_SCRIPT_PATH = 'C:/Users/admin/PycharmProjects/test_manager/scripts'
        SNAP_INSTALL_ROOT_DIR = 'C:/Program Files/snap'
        DOT_SNAP_DIR = 'C:/Users/admin/.snap'
        GPT_EXEC_PROPERTIES = 'C:/Data/GPT/gpt-tests-executer.properties'
        LIB_EXTENSION = 'dll'
        PROXY_FILE_CONF_PATH = 'C:/Users/admin/AppData/Roaming/SNAP/config/Preferences/org/netbeans'
        SNAP_TEMP_FOLDER = 'C:/Windows/Temp/snap-VM-SNAP-WIN10$'
        OUTPUT_DIR = "${OUTPUT_PATH}/${params.gptBranch}/${env.BUILD_NUMBER}"
        DATABASE_DIR = 'C:/Data/GPT/report/db'
    }
    stages {
        stage ("Checkout") {
            agent { label 'master' }
            steps {
                echo "Checkout project"
                git branch: "${params.gptBranch}", url: 'https://github.com/senbox-org/snap-gpt-tests.git'
            }
        }
        stage ("Build") {
            when {
                expression {
                    // run this stage only when json path is NOT specified
                    return "${params.jsonPath}" == '';
                }
            }
            agent { label 'master' }
            steps {
                echo "Build project from ${env.JOB_NAME} from ${env.GIT_BRANCH} with commit ${env.GIT_COMMIT}"
                sh "mkdir -p ${OUTPUT_DIR}"
                sh 'mvn clean package install'

                echo "Copy build to working directory..."
                sh "cp -r ./gpt-tests-executer/target/ ${OUTPUT_DIR}/gptExecutorTarget"
                sh "ls  ${OUTPUT_DIR}/gptExecutorTarget"
                sh "cp -R ./pygpt/ ${OUTPUT_DIR}/pygpt" // << Copy profiler and libraries
                sh "cp -R ./pygpt/templates ${OUTPUT_DIR}/templates" 
                sh "cp -R ./pygpt/statics ${OUTPUT_DIR}/statics" 
            }
        }
        stage('Filter JSON') {
            when {
                expression {
                    // run this stage only when json path is NOT specified
                    return "${params.jsonPath}" == '';
                }
            }
            agent { label 'master' }
            steps {
                echo "Checkin json test integrity..."
                sh "${PYTHON_CMD} -u ./pygpt/check_jsons.py ./gpt-tests-resources/tests"

                echo "Filtering json files..."
                sh "${PYTHON_CMD} -u ./pygpt/filter_json.py ./gpt-tests-resources/tests \"${params.testScope}\" ${OUTPUT_DIR}"
            }
        }
        stage('Reinstall SNAP') {
            when {
                expression {
                    // run this stage only when json path is NOT specified
                    return (("${params.jsonPath}" == '') && ("${params.reinstallSNAP}" == 'true')) ;
                }
            }
            agent { label 'master' }
            steps {
                echo "Reinstall SNAP from branch ${params.gptBranch}"
                sh ". ${ACTIVATE_VENV_PATH} && ${PYTHON_CMD} ${PYTHON_SCRIPT_PATH}/install.py ${params.gptBranch}"
                sh "sed -e \"s#Xmx[0-9]*#Xmx5#g\" -i \"${SNAP_INSTALL_ROOT_DIR}/bin/gpt.vmoptions\""
                sh "echo \"-Dhttp.proxyHost=proxy2.si.c-s.fr\" >> \"${SNAP_INSTALL_ROOT_DIR}/bin/gpt.vmoptions\""
                sh "echo \"-Dhttp.proxyPort=3128\" >> \"${SNAP_INSTALL_ROOT_DIR}/bin/gpt.vmoptions\""
                sh "echo \"-Dhttps.proxyHost=proxy2.si.c-s.fr\" >> \"${SNAP_INSTALL_ROOT_DIR}/bin/gpt.vmoptions\""
                sh "echo \"-Dhttps.proxyPort=3128\" >> \"${SNAP_INSTALL_ROOT_DIR}/bin/gpt.vmoptions\""
                sh "sed -e \"s#Xmx[0-9]*#Xmx5#g\" -i \"${SNAP_INSTALL_ROOT_DIR}/etc/snap.conf\""
                sh "echo \"-Dhttp.proxyHost=proxy2.si.c-s.fr\" >> \"${SNAP_INSTALL_ROOT_DIR}/etc/snap.conf\""
                sh "echo \"-Dhttp.proxyPort=3128\" >> \"${SNAP_INSTALL_ROOT_DIR}/etc/snap.conf\""
                sh "echo \"-Dhttps.proxyHost=proxy2.si.c-s.fr\" >> \"${SNAP_INSTALL_ROOT_DIR}/etc/snap.conf\""
                sh "echo \"-Dhttps.proxyPort=3128\" >> \"${SNAP_INSTALL_ROOT_DIR}/etc/snap.conf\""
                sh "sed -e \"s#Xmx[0-9]*#Xmx5#g\" -i \"${SNAP_INSTALL_ROOT_DIR}/bin/pconvert.vmoptions\""
                sh "echo \"-Dhttp.proxyHost=proxy2.si.c-s.fr\" >> \"${SNAP_INSTALL_ROOT_DIR}/bin/pconvert.vmoptions\""
                sh "echo \"-Dhttp.proxyPort=3128\" >> \"${SNAP_INSTALL_ROOT_DIR}/bin/pconvert.vmoptions\""
                sh "echo \"-Dhttps.proxyHost=proxy2.si.c-s.fr\" >> \"${SNAP_INSTALL_ROOT_DIR}/bin/pconvert.vmoptions\""
                sh "echo \"-Dhttps.proxyPort=3128\" >> \"${SNAP_INSTALL_ROOT_DIR}/bin/pconvert.vmoptions\""
                sh "cp \"${OUTPUT_PATH}/core.properties\" \"${PROXY_FILE_CONF_PATH}/core.properties\""
                
            }
        }
        stage('Launch Jobs') {
            when {
                expression {
                    // run this stage only when json path is NOT specified
                    return "${params.jsonPath}" == '';
                }
            }
            agent { label 'master' } 
            steps {
                script {
                    jsonString = sh(returnStdout: true, script: "cat ${OUTPUT_DIR}/JSONTestFiles.txt").trim()
                    jsonStringSeq = sh(returnStdout: true, script: "cat ${OUTPUT_DIR}/JSONTestFilesSeq.txt").trim()
                }

                echo "Launch seq Jobs from ${env.JOB_NAME} from ${env.GIT_BRANCH} with commit ${env.GIT_COMMIT}"
                launchJobs("${jsonString}", "${params.testScope}", params.saveOutput, "${OUTPUT_DIR}")

                echo "Launch seq Jobs from ${env.JOB_NAME} from ${env.GIT_BRANCH} with commit ${env.GIT_COMMIT}"
                launchJobs("${jsonStringSeq}", "${params.testScope}", params.saveOutput, "${OUTPUT_DIR}")
            }
            post {
                always {
                    sh "rm -rf \"$WORKSPACE\"/report"
                    sh "mkdir \"$WORKSPACE\"/report && mkdir \"$WORKSPACE\"/report/output"
                    sh "cp -r \"${OUTPUT_DIR}\"/report/* \"$WORKSPACE\"/report/output/"
                    sh "cp -r \"${OUTPUT_DIR}\"/statics/* \"$WORKSPACE\"/report/" 

                    sh "cat \"$WORKSPACE\"/report/output/Report_*.txt > \"$WORKSPACE\"/report/output/report.txt"
                    sh "mv \"$WORKSPACE\"/report/output/json \"$WORKSPACE\"/report/ && mv \"$WORKSPACE\"/report/output/performances \"$WORKSPACE\"/report/ && mv \"$WORKSPACE\"/report/output/images \"$WORKSPACE\"/report/"
                
                    sh "ls \"$WORKSPACE\"/report/json/"
                   
                    echo "Updating database"
                    sh "${PYTHON_CMD} -u ./pygpt/stats_db.py ${DATABASE_DIR}/statistics.db windows:master ${params.testScope} \"$WORKSPACE\"/report ${env.BUILD_NUMBER} ${env.GIT_BRANCH}"
                   
                    echo "Generate report"
                    sh "${PYTHON_CMD} -u ./pygpt/report_utils.py ${OUTPUT_DIR}/templates \"$WORKSPACE\"/report \"${params.testScope}\" windows:master ${DATABASE_DIR}/statistics.db"
                   
                    archiveArtifacts artifacts: "report/**/*.*", fingerprint: true
                    sh "rm -rf report" 
                }
            }
        }
        stage('Setup GPT Test') {
            when {
                expression {
                    return "${params.jsonPath}" != '';
                }
            }
            agent  { label 'master' }
            steps {
                script {
                    // Remove first character '.' from path
                    echo "JSON file path :${params.jsonPath}"
                    //jsonFilePath = sh(returnStdout: true, script: "echo ${params.jsonPath} | cut -d'.' -f 2 | sed 's#\\\\\\\\#\\\\\\\\\\\\\\\\#g'").trim()
                    jsonFilePath = "${params.jsonPath}"
                    jsonFilePath = jsonFilePath.substring(1)
                    echo "JSON file path after : $jsonFilePath"
                    
                }
                echo "Setup GPT Tests "
                echo "Reinstall SNAP from branch ${params.gptBranch}"
                sh ". ${ACTIVATE_VENV_PATH} && ${PYTHON_CMD} \"${PYTHON_SCRIPT_PATH}/gpt_test.py\" \"${WORKSPACE}${jsonFilePath}\""
            }
        }
        stage('SNAP GPT Test') {
            when {
                expression {
                    return "${params.jsonPath}" != '';
                }
            }
            agent  { label 'master' }
            steps {
                echo "Launch GPT Tests with json file ${params.jsonPath}"
                sh "mkdir -p ${params.outputDir}/report/json"
                sh "mkdir -p ${params.outputDir}/report/images/s1tbx"
                sh "mkdir -p ${params.outputDir}/report/images/s2tbx"
                sh "mkdir -p ${params.outputDir}/report/images/s3tbx"
                sh "mkdir -p ${params.outputDir}/report/images/snap"
                sh "mkdir -p ${params.outputDir}/report/css"
                sh "mkdir -p ${params.outputDir}/report/icons"
                sh "mkdir -p ${params.outputDir}/report/js"
                sh "mkdir -p ${params.outputDir}/report/output"
                sh "mkdir -p ${params.outputDir}/report/performances/csv"
                sh "mkdir -p ${params.outputDir}/report/performances/plot"
                sh "mkdir -p ${params.outputDir}/report/performances/stats"
                sh "mkdir -p ${params.outputDir}/report/tests"
                sh """export LD_LIBRARY_PATH=. && ${PYTHON_CMD} -u ${params.outputDir}/pygpt/snap_gpt_test.py '${JAVA_CMD}' '-Dncsa.hdf.hdflib.HDFLibrary.hdflib="${SNAP_INSTALL_ROOT_DIR}"/snap/modules/lib/amd64/jhdf.${LIB_EXTENSION} -Dncsa.hdf.hdf5lib.H5.hdf5lib="${SNAP_INSTALL_ROOT_DIR}"/snap/modules/lib/amd64/jhdf5.${LIB_EXTENSION} -cp ${params.outputDir}/gptExecutorTarget/TestOutput.jar' org.esa.snap.test.TestOutput \"${GPT_EXEC_PROPERTIES}\" \"${params.testScope}\" \"${params.jsonPath}\" \"${params.outputDir}/report\" ${params.saveOutput}"""
                sh "rm -rf ${DOT_SNAP_DIR}/var/cache/*"
                sh "rm -rf ${DOT_SNAP_DIR}/auxdata/dem/*"
                sh "rm -rf ${DOT_SNAP_DIR}/auxdata/Orbits/*"
                sh "rm -rf ${DOT_SNAP_DIR}/auxdata/LandCover/*"
                sh "rm -rf ${SNAP_TEMP_FOLDER}/*"
            }
        }
    }
    /*post {
        failure {
            step (
                emailext(
                    subject: "[SNAP] JENKINS-NOTIFICATION: ${currentBuild.result ?: 'SUCCESS'} : Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: """Build status : ${currentBuild.result ?: 'SUCCESS'}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':
Check console output at ${env.BUILD_URL}
${env.JOB_NAME} [${env.BUILD_NUMBER}]""",
                    attachLog: true,
                    compressLog: true,
                    recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class:'DevelopersRecipientProvider']]
                )
            )
        }
    }*/
}